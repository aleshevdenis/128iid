# frozen_string_literal: true

module Kenna
  module 128iid
    module Edgescan
      class EdgescanVulnerability
        attr_accessor :asset, :data

        def initialize(asset, vulnerability)
          @asset = asset
          @data = vulnerability
        end

        def specifier_id
          data["location_specifier_id"]
        end

        def location
          data["location"]
        end

        def matching_location_specifier
          asset.find_location_specifier(specifier_id, location)
        end

        def to_kenna_vulnerability
          {
            "scanner_type" => scanner_type,
            "scanner_identifier" => data["definition_id"],
            "created_at" => data["created_at"],
            "last_seen_at" => data["updated_at"],
            "scanner_score" => data["threat"] * 2,
            "status" => data["status"],
            "details" => details
          }
        end

        def to_corresponding_kenna_asset
          { "external_id" => external_asset_id, "tags" => asset.tags }
        end

        def external_asset_id
          matching_location_specifier&.external_asset_id || "ES#{asset.id} #{location}"
        end

        private

        def scanner_type
          data["layer"] == "application" ? "EdgescanApp" : "EdgescanNet"
        end

        def details
          data["details"].map { |detail| "#{detail_title(detail)}#{detail['src']}" }
                         .join("\n\n====================\n\n")
        end

        def detail_title(detail)
          type = detail["type"]
          return "#{detail['protocol']}:#{detail['port']}\n\n" if type == "service"
          return "Vulnerable #{detail['parameter_type']}: #{detail['parameter_name']}\n\n" if type == "attack_vector"

          ""
        end
      end
    end
  end
end
